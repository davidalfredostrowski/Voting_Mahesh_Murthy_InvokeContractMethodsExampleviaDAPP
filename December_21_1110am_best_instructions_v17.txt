    4  sudo apt-get update
    5  sudo apt-get install nodejs
    6  sudo apt install npm
    7  npm install webpack@3.0.0
    8  npm install webpack-cli@3.0.8
    9  npm install ganache-cli
   10  ls
   11  ./node_modules/.bin/ganache-cli --port 8545  --chainId 5777  -h ec2-35-86-113-181.us-west-2.compute.amazonaws.com




./node_modules/.bin/ganache-cli --port 8545  --chainId 5777  -h  ec2-54-201-155-91.us-west-2.compute.amazonaws.com



./node_modules/.bin/ganache-cli --port 8545  --chainId 5777  -h  ec2-35-165-119-154.us-west-2.compute.amazonaws.com


   12  npm install node-gyp@3.6.2
   13  npm install truffle@5.1.39
   14  npm install web3@1.0.0-beta.37
   15  npm install create-react-app
   16  ./node_modules/.bin/create-react-app  packt


NOTE: fails miserably!
ubuntu@ip-172-31-22-13:~$ ./node_modules/.bin/create-react-app  packt
You are running Node 10.19.0.
Create React App requires Node 14 or higher.
Please update your version of Node.


so now i update node



   17  node -v
   18  curl -sL https://deb.nodesource.com/setup_16.x -o nodesource_setup.sh
   19  sudo bash nodesource_setup.sh
   20  sudo apt install nodejs
   21  node -v
   22  ./node_modules/.bin/create-react-app  packt
   23  ls
   24  cd packt
   25  npm  start








copy over (only) 
test
migrate
contracts


copy over truffle-config.js from 

change the IP to update.






##### second terminal !!!


ubuntu@ip-172-31-27-113:~$ history
    1  ls
    2  ./node_modules/.bin/ganache-cli --port 8545  --chainId 5777  -h ec2-35-86-113-181.us-west-2.compute.amazonaws.com






ls
    2  cd packt/
    3  ls
    4  vi truffle-config.js
    5  npm install truffle@5.1.39
    6  ./node_modules/.bin/truffle migrate
    7  ls
    8  cd contracts
    9  ls
   10  vi Gaming.sol
   11  cd ..
   12* ./node_modules/.bin/truffle
   13  ./node_modules/.bin/truffle deploy
   14  ./node_modules/.bin/truffle test
   15  cd test
   16  ls
   17  vi TestGaming.sol
   18  ls
   19  cd ..
   20  ./node_modules/.bin/truffle test
   21  history




Compiling your contracts...
===========================
> Compiling ./test/TestGaming.sol
> Artifacts written to /tmp/test--15311-YOhefxCV936Y
> Compiled successfully using:
   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang



  TestGaming
    ✓ testPlayerWonGuessHigher (82ms)
    ✓ testPlayerLostGuessLower (70ms)


  2 passing (8s)



I put a PIN in in the gaming app..

ok  - now to the voting app.....

using the contracts, test, migrate directory from the packt example.



# i still have to change the following code in the Voting.sol program...

constructor(bytes32[] memory candidateNames) public {
    candidateList = candidateNames;
  }





ec2-54-184-225-206.us-west-2.compute.amazonaws.com




/packt$ npm install web3
# make sure that you cd to the 'contracts' directory....

> Web3 = require("web3")
> web3 = new Web3( new Web3.providers.HttpProvider("http://ec2-54-184-225-206.us-west-2.compute.amazonaws.com:8545"));
>code = fs.readFileSync('Voting.sol').toString()
var solc = require('solc');
var CONTRACT_FILE = 'Voting.sol'
var content =fs.readFileSync(CONTRACT_FILE).toString()
var input = {
  language: 'Solidity',
  sources: {
    [CONTRACT_FILE]: {
      content: content
    }
  },
  settings: {
    outputSelection: {
      '*': {
        '*': ['*']
      }
    }
  }
}




var compiled = solc.compile(JSON.stringify(input))
var output = JSON.parse(compiled)
var abi = output.contracts[CONTRACT_FILE]['Voting'].abi
var bytecode = output.contracts[CONTRACT_FILE]['Voting'].evm.bytecode.object
var HelloWorld = new web3.eth.Contract(abi);


deployedContract = new web3.eth.Contract(abi)
listOfCandidates = ['Rama', 'Nick', 'Jose']





ubuntu@ip-172-31-22-13:~/packt/contracts$ npm install solc


deployedContract.deploy({
  data: bytecode,
  arguments: [listOfCandidates.map(name => web3.utils.asciiToHex(name))]
}).send({
  from: '0xAB4E7550C568E6B10d88F7FBD182048791773652',
  gas: 1500000,
  gasPrice: web3.utils.toWei('0.00003', 'ether')
}).then((newContractInstance) => {
  deployedContract.options.address = newContractInstance.options.address
  console.log(newContractInstance.options.address)
});




deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)

deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0xAB4E7550C568E6B10d88F7FBD182048791773652'}).then((f) => console.log(f))

deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)




> deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0xAB4E7550C568E6B10d88F7FBD182048791773652'}).then((f) => console.log(f))
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 1780,
  [Symbol(trigger_async_id_symbol)]: 1764,
  [Symbol(destroyed)]: { destroyed: false }
}
> {
  transactionHash: '0x1ba9a7562d72ba2158d318ecf323b6a57e62f10b802c9f98b1d7ef5167ddbca9',
  transactionIndex: 0,
  blockHash: '0x1be6161a06e470c76e05417f00e584a5ea1cb6b024fd64187071a8408f23ef66',
  blockNumber: 2,
  from: '0xab4e7550c568e6b10d88f7fbd182048791773652',
  to: '0x7cbcd0ebcd9e5e8903bac1a78c0604ed1c16b05b',
  gasUsed: 45953,
  cumulativeGasUsed: 45953,
  contractAddress: null,
  status: true,
  logsBloom: '0x
  events: {}
}

> deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0xAB4E7550C568E6B10d88F7FBD182048791773652'}).then((f) => console.log(f))
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 1889,
  [Symbol(trigger_async_id_symbol)]: 1873,
  [Symbol(destroyed)]: { destroyed: false }
}
> {
  transactionHash: '0x4021a9a114a5027c1bba9265b2dcb218054a2dc92f2c8ce3960f7fdc2378cad0',
  transactionIndex: 0,
  blockHash: '0x4a7f62a3fc0f6d40c01141e79d6829d463c108236189ea5763ece362927f9ead',
  blockNumber: 3,
  from: '0xab4e7550c568e6b10d88f7fbd182048791773652',
  to: '0x7cbcd0ebcd9e5e8903bac1a78c0604ed1c16b05b',
  gasUsed: 30953,
  cumulativeGasUsed: 30953,
  contractAddress: null,
  status: true,
  logsBloom: '0x
  events: {}
}

> deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0xAB4E7550C568E6B10d88F7FBD182048791773652'}).then((f) => console.log(f))
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 1984,
  [Symbol(trigger_async_id_symbol)]: 1970,
  [Symbol(destroyed)]: { destroyed: false }
}
> {
  transactionHash: '0x2e2c34854448e2b680bcb3b37615b0fe1135ad006e79c3f0df9edca8f1144c2e',
  transactionIndex: 0,
  blockHash: '0x4b1829ea87e5cd2682d45d7c3e0dd3ad6f47ad9707cec9d2a8cbf75705e8b743',
  blockNumber: 4,
  from: '0xab4e7550c568e6b10d88f7fbd182048791773652',
  to: '0x7cbcd0ebcd9e5e8903bac1a78c0604ed1c16b05b',
  gasUsed: 30953,
  cumulativeGasUsed: 30953,
  contractAddress: null,
  status: true,
  logsBloom: '0x
  events: {}
}

>
> deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 2076,
  [Symbol(trigger_async_id_symbol)]: 5,
  [Symbol(destroyed)]: { destroyed: false }
}
> null 3

> deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0xAB4E7550C568E6B10d88F7FBD182048791773652'}).then((f) => console.log(f))
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 2132,
  [Symbol(trigger_async_id_symbol)]: 2116,
  [Symbol(destroyed)]: { destroyed: false }
}
> {
  transactionHash: '0x1b7d159f92f358946540cfc03ade6c21d1ed087aa3724f3b6b290e171f8fbb04',
  transactionIndex: 0,
  blockHash: '0x85629dedf409777c7ce680313f49150e64a663b7f4c85b1b5608090ad9bdeae2',
  blockNumber: 5,
  from: '0xab4e7550c568e6b10d88f7fbd182048791773652',
  to: '0x7cbcd0ebcd9e5e8903bac1a78c0604ed1c16b05b',
  gasUsed: 30953,
  cumulativeGasUsed: 30953,
  contractAddress: null,
  status: true,
  logsBloom: '0x
  events: {}
}
> deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0xAB4E7550C568E6B10d88F7FBD182048791773652'}).then((f) => console.log(f))
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 2223,
  [Symbol(trigger_async_id_symbol)]: 2209,
  [Symbol(destroyed)]: { destroyed: false }
}
> {
  transactionHash: '0xd5ca59622674e820c5cb39c847e2a4f9dffe45091cb8b5a302955f2c57bb6b52',
  transactionIndex: 0,
  blockHash: '0x03811fb377a358498422cd9d5dba3d203ef2a9393fec3d435a69363dc1303676',
  blockNumber: 6,
  from: '0xab4e7550c568e6b10d88f7fbd182048791773652',
  to: '0x7cbcd0ebcd9e5e8903bac1a78c0604ed1c16b05b',
  gasUsed: 30953,
  cumulativeGasUsed: 30953,
  contractAddress: null,
  status: true,
  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
  events: {}
}
> deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0xAB4E7550C568E6B10d88F7FBD182048791773652'}).then((f) => console.log(f))
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 2312,
  [Symbol(trigger_async_id_symbol)]: 2298,
  [Symbol(destroyed)]: { destroyed: false }
}
> {
  transactionHash: '0x94d727f93fcb284e88b3edd774e1fd93e3ec6fa57cce37ba6fddab69288bfe07',
  transactionIndex: 0,
  blockHash: '0x14b7989be64ef9400755b4f07bf334499f24cac0a57ec6cb6c6e1adfa77709e9',
  blockNumber: 7,
  from: '0xab4e7550c568e6b10d88f7fbd182048791773652',
  to: '0x7cbcd0ebcd9e5e8903bac1a78c0604ed1c16b05b',
  gasUsed: 30953,
  cumulativeGasUsed: 30953,
  contractAddress: null,
  status: true,
  logsBloom: '0x
  events: {}
}
> deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0xAB4E7550C568E6B10d88F7FBD182048791773652'}).then((f) => console.log(f))
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 2401,
  [Symbol(trigger_async_id_symbol)]: 2387,
  [Symbol(destroyed)]: { destroyed: false }
}
> {
  transactionHash: '0xba86e6d6a4f1bf3f9a269253211387378a182796f30205842ad2dabddbdadb51',
  transactionIndex: 0,
  blockHash: '0x02f07804fdb4b0a97aa6c1730ace7180b167bc45f69abd08230077aafe493cc5',
  blockNumber: 8,
  from: '0xab4e7550c568e6b10d88f7fbd182048791773652',
  to: '0x7cbcd0ebcd9e5e8903bac1a78c0604ed1c16b05b',
  gasUsed: 30953,
  cumulativeGasUsed: 30953,
  contractAddress: null,
  status: true,
  logsBloom: '0x
  events: {}
}

> deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 2496,
  [Symbol(trigger_async_id_symbol)]: 5,
  [Symbol(destroyed)]: { destroyed: false }
}
> null 7











starting up on december 22, 2021....



34.220.74.145
ec2-34-220-74-145.us-west-2.compute.amazonaws.com




 ./node_modules/.bin/ganache-cli --port 8545  --chainId 5777 -h ec2-34-220-74-145.us-west-2.compute.amazonaws.com


now i am going to deploy directly from the node console....
(vs using truffle)

then test the application of writing /reading from the web app (dapp)



# make sure that you cd to the 'contracts' directory....

> Web3 = require("web3")
> web3 = new Web3( new Web3.providers.HttpProvider("http://ec2-34-220-74-145.us-west-2.compute.amazonaws.com:8545"));
>code = fs.readFileSync('Voting.sol').toString()
var solc = require('solc');
var CONTRACT_FILE = 'Voting.sol'
var content =fs.readFileSync(CONTRACT_FILE).toString()
var input = {
  language: 'Solidity',
  sources: {
    [CONTRACT_FILE]: {
      content: content
    }
  },
  settings: {
    outputSelection: {
      '*': {
        '*': ['*']
      }
    }
  }
}




var compiled = solc.compile(JSON.stringify(input))
var output = JSON.parse(compiled)
var abi = output.contracts[CONTRACT_FILE]['Voting'].abi
var bytecode = output.contracts[CONTRACT_FILE]['Voting'].evm.bytecode.object
var HelloWorld = new web3.eth.Contract(abi);


deployedContract = new web3.eth.Contract(abi)
listOfCandidates = ['Rama', 'Nick', 'Jose']





ubuntu@ip-172-31-22-13:~/packt/contracts$ npm install solc


deployedContract.deploy({
  data: bytecode,
  arguments: [listOfCandidates.map(name => web3.utils.asciiToHex(name))]
}).send({
  from: '0x80CCd435f188837fBB812cedd474BB616e7e0070',
  gas: 1500000,
  gasPrice: web3.utils.toWei('0.00003', 'ether')
}).then((newContractInstance) => {
  deployedContract.options.address = newContractInstance.options.address
  console.log(newContractInstance.options.address)
});




deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)

deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0x80CCd435f188837fBB812cedd474BB616e7e0070'}).then((f) => console.log(f))

deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)





to run in the web app  - i need the abi definition AND	 the deployed contract address

from node console:

node> deployedContract

(obtain address)



( now update in the web app...)
		contract.options.address = "0xac8E281442B27A430539b94b3dafeb487e053E60";









add 'const'
npm install jquery


https://github.com/webpack/webpack/issues/11868






ubuntu@ip-172-31-19-72:~$ ./node_modules/.bin/create-react-app  packt

You are running `create-react-app` 4.0.3, which is behind the latest release (5.0.0).

We no longer support global installation of Create React App.

Please remove any global installs with one of the following commands:
- npm uninstall -g create-react-app
- yarn global remove create-react-app

The latest instructions for creating a new app can be found here:
https://create-react-app.dev/docs/getting-started/







circular problem

create-react-app wants node > 14.0.0 or higher

node >14.0.0 and create-react-app@5.0.0 will give a slew of problems with web3 
so DONT USE IT


I backed up to 4.0.3 then up to two years old 3.4.1 ( which DID INSTALL ) I will stay on it until FB gets their act together!






ubuntu@ip-172-31-27-120:~/packt2$ history
    1  ls
    2  pwd
    3  sudo apt-get update
    4  sudo apt-get install nodejs
    5  sudo apt install npm
    6  npm install webpack@3.0.0
    7  npm install webpack-cli@3.0.8
    8  npm install ganache-cli
    9  npm install node-gyp@3.6.2
   10  npm install truffle@5.1.39
   11  npm install web3@1.0.0-beta.37
   12  npm install create-react-app@3.4.1
   13  ./node_modules/.bin/create-react-app  packt

You are running Node 10.19.0.
Create React App requires Node 14 or higher.
Please update your version of Node.




   14  ls
   15  cd packt
   16  ls
   17  npm start
   18  node -v
   19  curl -sL https://deb.nodesource.com/setup_16.x -o nodesource_setup.sh
   20  sudo bash nodesource_setup.sh
   21  sudo apt install nodejs
   22  node -v
   23  ./node_modules/.bin/create-react-app  packt
   24  cd ..
   25  ./node_modules/.bin/create-react-app  packt
   26  ./node_modules/.bin/create-react-app  packt2
   27  npm start
   28  cd packt2
   29  npm start
   30  history


fix 1: 


https://github.com/facebook/create-react-app/issues/11756

module.exports = {
    resolve: {
        fallback: {
            assert: require.resolve('assert'),
            crypto: require.resolve('crypto-browserify'),
            http: require.resolve('stream-http'),
            https: require.resolve('https-browserify'),
            os: require.resolve('os-browserify/browser'),
            stream: require.resolve('stream-browserify'),
        },
    },
};
using;

"dependencies": {
    "@testing-library/jest-dom": "^5.16.1",
    "@testing-library/react": "^12.1.2",
    "@testing-library/user-event": "^13.5.0",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "5.0.0",
    "web-vitals": "^2.1.2",
    "web3": "^1.6.1"
  },
but also need but got compilation errors on the build process:

FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory" error
this was resolved by adding to my .env file;

GENERATE_SOURCEMAP=false




fix 2: 
https://stackoverflow.com/questions/63195843/webpack-module-warning-failed-to-parse-source-map-from-data-url


                            options: {

                                filterSourceMappingUrl: (url, resourcePath) => {
                                    //  console.log({ url, resourcePath }) example:
                                    // {
                                    //  url: 'index.js.map',
                                    //  resourcePath: '/repos/xlib-wsl/common/temp/node_modules/.pnpm/https-proxy-agent@5.0.0/node_modules/https-proxy-agent/dist/index.js'
                                    // }

                                    if (/.*\/node_modules\/.*/.test(resourcePath)) {
                                        return false
                                    }
                                    return true
                                }

                            }





both in webpack-config.js



now getting browser errors: 

https://stackoverflow.com/questions/30239060/uncaught-referenceerror-process-is-not-defined








relevent posts: 
https://github.com/facebook/create-react-app/issues/11756









    1  ls
    2  pwd
    3  sudo apt-get update
    4  sudo apt-get install nodejs
    5  sudo apt install npm
    6  npm install webpack@3.0.0
    7  npm install webpack-cli@3.0.8
    8  npm install ganache-cli
    9  npm install node-gyp@3.6.2
   10  npm install truffle@5.1.39
   11  npm install web3@1.0.0-beta.37
   12  npm install create-react-app@3.4.1
   13  ./node_modules/.bin/create-react-app  packt
   14  ls
   15  cd packt
   16  ls
   17  npm start
   18  node -v
   19  curl -sL https://deb.nodesource.com/setup_16.x -o nodesource_setup.sh
   20  sudo bash nodesource_setup.sh
   21  sudo apt install nodejs
   22  node -v
   23  ./node_modules/.bin/create-react-app  packt
   24  cd ..
   25  ./node_modules/.bin/create-react-app  packt3
   26  ./node_modules/.bin/create-react-app  packt2
   27  npm start
   28  cd packt2
   29  npm start
   30  history
   31  npm install web3
   32  node
   33  ls
   34  cd src
   35  ls
   36  vi App.js
   37  cd ..
   38  npm start
   39  ls
   40  cd src
   41  ls
   42  vi App.js
   43  cd ..
   44  ls
   45  cd node_modules/
   46  cd web3
   47  ls
   48  cd src
   49  ls
   50  vi index.js
   51  cd ..
   52  ls
   53  cd react-scripts









Uncaught ReferenceError: process is not defined
    at Object.../node_modules/readable-stream/lib/_stream_writable.js (_stream_writable.js:57)


_stream_writable.js   

Uncaught ReferenceError: process is not defined










    1  ls
    2  sudo apt-get update
    3  sudo apt-get install nodejs    <- installed 'old' one first to get npm ro run w/o error!
    4  sudo apt install npm
    5  npm install webpack@3.0.0
    6  npm install webpack-cli@3.0.8
    7  npm install ganache-cli
    8  npm install node-gyp@3.6.2
    9  npm install truffle@5.1.39
   10  npm install web3@1.0.0-beta.37
   11  npm install create-react-app
   12  ./node_modules/.bin/create-react-app  packt
   13  curl -sL https://deb.nodesource.com/setup_16.x -o nodesource_setup.sh
   14  sudo bash nodesource_setup.sh
   15  sudo apt install nodejs
   16  ./node_modules/.bin/create-react-app  packt
   17  ls
   18  npm start
   19  cd packt
   20  ls
   21  npm start
   22  npm install @types/node --save
   23  npm start
   24  ls
   25  npm install
   26  npm start
   27  npm install process
   28  npm start
   29  pwd
   30  cd node_modules/
   31  cd react-scripts/
   32  ls
   33  cd config
   34  ls
   35  vi webpack.config.js
   36  cd ..
   37  npm start
   38  cd node_modules/
   39  cd react-scripts
   40  ls
   41  cd config
   42  ls
   43  vi webpack.config.js
   44  cd ..
   45  npm start
   46  cd node_modules/
   47  ls
   48  cd react-stream
   49  ls
   50  ls -l react*
   51  cd react-scripts
   52  ls
   53  cd config
   54  ls
   55  vi webpack.config.js
   56  cd ..
   57  npm start
   58  cd node_modules/
   59  cd react-scripts
   60  cd config
   61  ls
   62  vi webpack.config.js
   63  cd ..
   64  npm start
   65  history


### now i installed web3


npm install web3 


ERROR in ./node_modules/xhr2-cookies/dist/xml-http-request.js 37:11-26
Module not found: Error: Can't resolve 'http' in '/home/ubuntu/packt/node_modules/xhr2-cookies/dist'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
        - add a fallback 'resolve.fallback: { "http": require.resolve("stream-http") }'
        - install 'stream-http'
If you don't want to include a polyfill, you can use an empty module like this:
        resolve.fallback: { "http": false }
 @ ./node_modules/xhr2-cookies/dist/index.js 11:9-38
 @ ./node_modules/web3-providers-http/lib/index.js 27:11-49
 @ ./node_modules/web3-core-requestmanager/lib/index.js 56:16-46
 @ ./node_modules/web3-core/lib/index.js 23:23-58
 @ ./node_modules/web3/lib/index.js 32:11-31
 @ ./src/App.js 6:0-24
 @ ./src/index.js 7:0-24 11:33-36

ERROR in ./node_modules/xhr2-cookies/dist/xml-http-request.js 39:12-28
Module not found: Error: Can't resolve 'https' in '/home/ubuntu/packt/node_modules/xhr2-cookies/dist'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
        - add a fallback 'resolve.fallback: { "https": require.resolve("https-browserify") }'
        - install 'https-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
        resolve.fallback: { "https": false }
 @ ./node_modules/xhr2-cookies/dist/index.js 11:9-38
 @ ./node_modules/web3-providers-http/lib/index.js 27:11-49
 @ ./node_modules/web3-core-requestmanager/lib/index.js 56:16-46
 @ ./node_modules/web3-core/lib/index.js 23:23-58
 @ ./node_modules/web3/lib/index.js 32:11-31
 @ ./src/App.js 6:0-24
 @ ./src/index.js 7:0-24 11:33-36

ERROR in ./node_modules/xhr2-cookies/dist/xml-http-request.js 41:9-22
Module not found: Error: Can't resolve 'os' in '/home/ubuntu/packt/node_modules/xhr2-cookies/dist'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
        - add a fallback 'resolve.fallback: { "os": require.resolve("os-browserify/browser") }'
        - install 'os-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
        resolve.fallback: { "os": false }
 @ ./node_modules/xhr2-cookies/dist/index.js 11:9-38
 @ ./node_modules/web3-providers-http/lib/index.js 27:11-49
 @ ./node_modules/web3-core-requestmanager/lib/index.js 56:16-46
 @ ./node_modules/web3-core/lib/index.js 23:23-58
 @ ./node_modules/web3/lib/index.js 32:11-31
 @ ./src/App.js 6:0-24
 @ ./src/index.js 7:0-24 11:33-36

9 errors have detailed information that is not shown.
Use 'stats.errorDetails: true' resp. '--stats-error-details' to show it.

webpack 5.65.0 compiled with 9 errors and 1 warning in 19760 ms










{ "https": false }
{ "crypto": false }
{ "http": false }
{ "stream": false }







util.js:33 Uncaught ReferenceError: Buffer is not defined

npm install --save buffer


  npm install multicodec
npm install definitions - >>>> more errors !!!! (redo install !) 










    1  ls
    2  pwd
    3  sudo apt-get update
    4  sudo apt-get install nodejs
    5  sudo apt install npm
    6  npm install webpack@3.0.0
    7  npm install webpack-cli@3.0.8
    8  npm install ganache-cli
    9  npm install node-gyp@3.6.2
   10  npm install truffle@5.1.39
   11  npm install web3@1.0.0-beta.37
   12  npm install create-react-app
   13  curl -sL https://deb.nodesource.com/setup_16.x -o nodesource_setup.sh
https://deb.nodesource.com/setup_14.x 

   14  sudo bash nodesource_setup.sh
   15  sudo apt install nodejs
   16  ./node_modules/.bin/create-react-app  packt


./node_modules/.bin/create-react-app  packt
   17  cd packt
   18  npm start
   19  npm install
   20  npm start
   21  cd node_modules/
   22  cd react-scripts
   23  cd config
   24  vi webpack.config.js
   25  cd ..
   26  npm install
   27  npm start
   28  ls
   29  npm cache-clean --force
   30  npm cache clean --force
   31  rm -rf node_modules
   32  npm install
   33  ls
   34  cd node_modules
   35  ls
   36  cd ..
   37  npm start
   38  cd node_modules/
   39  dir definitions
   40  npm install definitions
   41  cd ..
   42  npm start
   43  ls
   44  cd src
   45  ls
   46  vi App.css
   47  vi App.js
   48  cd ..
   49  npm start
   50  ls
   51  cd src
   52  ls
   53  vi index.css
   54  cp index.css index_backup.css
   55  ls
   56  vi index.css
   57  ls
   58  cd ...
   59  cd ..
   60  cd sc
   61  cd src
   62  ls
   63  vi App.js
   64  cd ..
   65  history
ubuntu@ip-172-31-11-130:~/packt$




import logo from './logo.svg';
//import './App.css';
import Web3 from 'web3';


# deleted index.css file contents (after backing up)


finally got it to load web3 with create-react-app 5.0 / node 16+


for the record here is my copy of the webpack.config.js

located at 
/


  return {
    target: ['browserslist'],
    mode: isEnvProduction ? 'production' : isEnvDevelopment && 'development',
    // Stop compilation early in production
    bail: isEnvProduction,
    devtool: isEnvProduction
      ? shouldUseSourceMap
        ? 'source-map'
        : false
      : isEnvDevelopment && 'cheap-module-source-map',
    // These are the "entry points" to our application.
    // This means they will be the "root" imports that are included in JS bundle.
    entry: paths.appIndexJs,
    output: {
      // The build folder.
      path: paths.appBuild,
      // Add /* filename */ comments to generated require()s in the output.
      pathinfo: isEnvDevelopment,
      // There will be one main bundle, and one file per asynchronous chunk.
      // In development, it does not produce real files.
      filename: isEnvProduction
        ? 'static/js/[name].[contenthash:8].js'
        : isEnvDevelopment && 'static/js/bundle.js',
      // There are also additional JS chunk files if you use code splitting.
      chunkFilename: isEnvProduction
        ? 'static/js/[name].[contenthash:8].chunk.js'
        : isEnvDevelopment && 'static/js/[name].chunk.js',
      assetModuleFilename: 'static/media/[name].[hash][ext]',
      // webpack uses `publicPath` to determine where the app is being served from.
      // It requires a trailing slash, or the file assets will get an incorrect path.
      // We inferred the "public path" (such as / or /my-project) from homepage.
      publicPath: paths.publicUrlOrPath,
      // Point sourcemap entries to original disk location (format as URL on Windows)
      devtoolModuleFilenameTemplate: isEnvProduction
        ? info =>
            path
              .relative(paths.appSrc, info.absoluteResourcePath)
              .replace(/\\/g, '/')
        : isEnvDevelopment &&
          (info => path.resolve(info.absoluteResourcePath).replace(/\\/g, '/')),
    },
    cache: {
      type: 'filesystem',
      version: createEnvironmentHash(env.raw),
      cacheDirectory: paths.appWebpackCache,
      store: 'pack',
      buildDependencies: {
        defaultWebpack: ['webpack/lib/'],
        config: [__filename],
        tsconfig: [paths.appTsConfig, paths.appJsConfig].filter(f =>
          fs.existsSync(f)
        ),
      },
    },
    infrastructureLogging: {
      level: 'none',
    },
    optimization: {
      minimize: isEnvProduction,
      minimizer: [
        // This is only used in production mode
        new TerserPlugin({
          terserOptions: {
            parse: {
              // We want terser to parse ecma 8 code. However, we don't want it
              // to apply any minification steps that turns valid ecma 5 code
              // into invalid ecma 5 code. This is why the 'compress' and 'output'
              // sections only apply transformations that are ecma 5 safe
              // https://github.com/facebook/create-react-app/pull/4234
              ecma: 8,
            },
            compress: {
              ecma: 5,
              warnings: false,
              // Disabled because of an issue with Uglify breaking seemingly valid code:
              // https://github.com/facebook/create-react-app/issues/2376
              // Pending further investigation:
              // https://github.com/mishoo/UglifyJS2/issues/2011
              comparisons: false,
              // Disabled because of an issue with Terser breaking valid code:
              // https://github.com/facebook/create-react-app/issues/5250
              // Pending further investigation:
              // https://github.com/terser-js/terser/issues/120
              inline: 2,
            },
            mangle: {
              safari10: true,
            },
            // Added for profiling in devtools
            keep_classnames: isEnvProductionProfile,
            keep_fnames: isEnvProductionProfile,
            output: {
              ecma: 5,
              comments: false,
              // Turned on because emoji and regex is not minified properly using default
              // https://github.com/facebook/create-react-app/issues/2488
              ascii_only: true,
            },
          },
        }),
        // This is only used in production mode
        new CssMinimizerPlugin(),
      ],
    },
    resolve: {
      // This allows you to set a fallback for where webpack should look for modules.
      // We placed these paths second because we want `node_modules` to "win"
      // if there are any conflicts. This matches Node resolution mechanism.
      // https://github.com/facebook/create-react-app/issues/253


        fallback: {
    "os": false, 
    "https": false,
		"http": false,
		"stream": false,
		"crypto": false,
//"buffer": require.resolve("buffer/"),
		//       assert: require.resolve('assert'),
     //       crypto: require.resolve('crypto-browserify'),
     //       http: require.resolve('stream-http'),
     //       https: require.resolve('https-browserify'),
     //       os: require.resolve('os-browserify/browser'),
     //       stream: require.resolve('stream-browserify'),
//process: require.resolve('process/browser'),  // <- this
        },







> Web3 = require("web3")
> web3 = new Web3( new Web3.providers.HttpProvider("http://ec2-54-201-155-91.us-west-2.compute.amazonaws.com:8545"));
>code = fs.readFileSync('Voting.sol').toString()
var solc = require('solc');
var CONTRACT_FILE = 'Voting.sol'
var content =fs.readFileSync(CONTRACT_FILE).toString()
var input = {
  language: 'Solidity',
  sources: {
    [CONTRACT_FILE]: {
      content: content
    }
  },
  settings: {
    outputSelection: {
      '*': {
        '*': ['*']
      }
    }
  }
}




var compiled = solc.compile(JSON.stringify(input))
var output = JSON.parse(compiled)
var abi = output.contracts[CONTRACT_FILE]['Voting'].abi
var bytecode = output.contracts[CONTRACT_FILE]['Voting'].evm.bytecode.object
var HelloWorld = new web3.eth.Contract(abi);


deployedContract = new web3.eth.Contract(abi)
listOfCandidates = ['Rama', 'Nick', 'Jose']





ubuntu@ip-172-31-22-13:~/packt/contracts$ npm install solc


deployedContract.deploy({
  data: bytecode,
  arguments: [listOfCandidates.map(name => web3.utils.asciiToHex(name))]
}).send({
  from: '0x23582390b6fAE9205Cc758Ae9740Bb28Cd6E2Cc6',
  gas: 1500000,
  gasPrice: web3.utils.toWei('0.00003', 'ether')
}).then((newContractInstance) => {
  deployedContract.options.address = newContractInstance.options.address
  console.log(newContractInstance.options.address)
});




deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)

deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0x23582390b6fAE9205Cc758Ae9740Bb28Cd6E2Cc6'}).then((f) => console.log(f))

deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)

0x7Ce283138b1489907Aa6Ba4601Eb08AcdDBA1892





##### stardate 12/27/2021
##### downgraded node to setup_14.x


ubuntu@ip-172-31-16-17:~/packt$ history
    1  sudo apt-get update
    2  sudo apt-get install nodejs
    3  sudo apt install npm
    4  npm install webpack@3.0.0
    5  npm install webpack-cli@3.0.8
    6  npm install ganache-cli
    7  npm install node-gyp@3.6.2
    8  npm install truffle@5.1.39
    9  npm install web3@1.0.0-beta.37
   10  npm install create-react-app
   11  curl -sL https://deb.nodesource.com/setup_14.x -o nodesource_setup.sh        <- do not run node16 or suffer module not found error!!!!!!
   12  sudo bash nodesource_setup.sh
   13  sudo apt install nodejs
   14  ubuntu@ip-172-31-16-17:~$
   15  ./node_modules/.bin/create-react-app  packt
   16  ls
   17  cd packt
   18  npm install
   19  npm start
   20  history



##### pulled out all Provide updates to webpack leaving only the following changes ( to my knowledge !) at : 


extensions: [ '.ts', '.js'],
        fallback: {
    "os": false, 
    "https": false,
		"http": false,
		"stream": false,
		"crypto": false,
		"assert": false,
		"url": false,
//		"buffer": false,
 "buffer": require.resolve("buffer"),
//"buffer": require.resolve("buffer/"),
		//       assert: require.resolve('assert'),
     //       crypto: require.resolve('crypto-browserify'),
     //       http: require.resolve('stream-http'),
     //       https: require.resolve('https-browserify'),
     //       os: require.resolve('os-browserify/browser'),
  //       stream: require.resolve('stream-browserify'),
//
//

//
process: require.resolve("process/browser"),  // <- this
        },
      modules: ['node_modules', paths.appNodeModules].concat(
        modules.additionalModulePaths || []
      ),
      // These are the reasonable defaults supported by the Node ecosystem.
      // We also include JSX as a common component filename extension to support
      // some tools, although we do not recommend using it, see:
      // https://github.com/facebook/create-react-app/issues/290
      // `web` extension prefixes have been added for better support
      // for React Native Web.
      extensions: paths.moduleFileExtensions
        .map(ext => `.${ext}`)
        .filter(ext => useTypeScript || !ext.includes('ts')),
      alias: {
        // Support React Native Web
        // https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/
        'react-native': 'react-native-web',
        // Allows for better profiling with ReactDevTools
        ...(isEnvProductionProfile && {
          'react-dom$': 'react-dom/profiling',
          'scheduler/tracing': 'scheduler/tracing-profiling',
        }),
        ...(modules.webpackAliases || {}),


"buffer": "buffer",
    process: "process/browser", // 1st try
    process: path.resolve(__dirname, "./node_modules/process/browser.js"), // 2nd try


      },
      plugins: [


//inew webpack.ProvidePlugin({
//	process: 'process/browser',
//}),
//new webpack.ProvidePlugin({
//	Buffer: ['buffer','Buffer'],
//}),

//        new webpack.ProvidePlugin({
//            Buffer: ['buffer', 'Buffer'],
//        }), 
//       new webpack.ProvidePlugin({
//            process: 'process/browser',
//        }),






./node_modules/.bin/ganache-cli --port 8545  --chainId 5777  -h  ec2-35-165-119-154.us-west-2.compute.amazonaws.com

copy over the contracts

ubuntu@ip-172-31-16-17:~/packt$ mkdir contracts





/packt$ npm install web3


ubuntu@ip-172-31-16-17:~/packt/contracts$ npm install solc

# make sure that you cd to the 'contracts' directory....

> Web3 = require("web3")
> web3 = new Web3( new Web3.providers.HttpProvider("http://ec2-35-165-119-154.us-west-2.compute.amazonaws.com:8545"));
>code = fs.readFileSync('Voting.sol').toString()
var solc = require('solc');
var CONTRACT_FILE = 'Voting.sol'
var content =fs.readFileSync(CONTRACT_FILE).toString()
var input = {
  language: 'Solidity',
  sources: {
    [CONTRACT_FILE]: {
      content: content
    }
  },
  settings: {
    outputSelection: {
      '*': {
        '*': ['*']
      }
    }
  }
}




var compiled = solc.compile(JSON.stringify(input))
var output = JSON.parse(compiled)
var abi = output.contracts[CONTRACT_FILE]['Voting'].abi
var bytecode = output.contracts[CONTRACT_FILE]['Voting'].evm.bytecode.object
var HelloWorld = new web3.eth.Contract(abi);


deployedContract = new web3.eth.Contract(abi)
listOfCandidates = ['Rama', 'Nick', 'Jose']





ubuntu@ip-172-31-22-13:~/packt/contracts$ npm install solc


deployedContract.deploy({
  data: bytecode,
  arguments: [listOfCandidates.map(name => web3.utils.asciiToHex(name))]
}).send({
  from: '0x8867f3BFE98b9f8cD66e91349822AF999d133B4A',
  gas: 1500000,
  gasPrice: web3.utils.toWei('0.00003', 'ether')
}).then((newContractInstance) => {
  deployedContract.options.address = newContractInstance.options.address
  console.log(newContractInstance.options.address)
});




deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)

deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0x8867f3BFE98b9f8cD66e91349822AF999d133B4A'}).then((f) => console.log(f))

deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)



0x6073d5F4EA6ecF1260d0D8E443963ccc971B788B    <- my "contract" address! 


I ran through the manual web3 deployment of the contract...
this included (above) the npm install of web3 , the npm install of solc (both under contracts)

loaded in all of the web3 code.... then i get 'buffer not defined' (below)
then i removed all web3 code  - i then had the same problem that I did not have before...



I conntected the metamask
I had to restart browsers to be able to get the connnect ..



util.js:33 Uncaught ReferenceError: Buffer is not defined
    at varintEncode (util.js:33)
    at Object../node_modules/multicodec/src/varint-table.js (varint-table.js:11)
    at Object.options.factory (react refresh:6)
    at __webpack_require__ (bootstrap:24)
    at fn (hot module replacement:61)
    at Object../node_modules/multicodec/src/index.js (index.js:16)
    at Object.options.factory (react refresh:6)
    at __webpack_require__ (bootstrap:24)
    at fn (hot module replacement:61)
    at Object../node_modules/content-hash/src/index.js (index.js:19)



import * as buffer from 'buffer';
(window as any).Buffer = buffer;





import * as buffer from 'buffer';
(window as any).Buffer = buffer;








_stream_writable.js:57 Uncaught ReferenceError: process is not defined
    at Object.../node_modules/readable-stream/lib/_stream_writable.js (_stream_writable.js:57)
    at Object.options.factory (react refresh:6)
    at __webpack_require__ (bootstrap:24)
    at fn (hot module replacement:61)
    at Object.../node_modules/readable-stream/readable-browser.js (readable-browser.js:4)
    at Object.options.factory (react refresh:6)
    at __webpack_require__ (bootstrap:24)
    at fn (hot module replacement:61)
    at Object.../node_modules/stream-browserify/index.js (index.js:28)
    at Object.options.factory (react refresh:6)




_stream_writable.js:57 Uncaught ReferenceError: process is not defined
    at Object.../node_modules/readable-stream/lib/_stream_writable.js (_stream_writable.js:57)
    at Object.options.factory (react refresh:6)
    at __webpack_require__ (bootstrap:24)
    at fn (hot module replacement:61)
    at Object.../node_modules/readable-stream/readable-browser.js (readable-browser.js:4)
    at Object.options.factory (react refresh:6)
    at __webpack_require__ (bootstrap:24)
    at fn (hot module replacement:61)
    at Object.../node_modules/stream-browserify/index.js (index.js:28)
    at Object.options.factory (react refresh:6)






  100  cd src
  101  ls
  102  cp index.css  index.css_backup
  103  cd ..
  104  npm run build
  105  cd src
  106  ls
  107  rm index.css
  108  cd ..
  109  npm run build
  110  npm start
  111  cd src
  112  ls
  113  cp index.css_backup   index.css
  114  npm start
  115  npm run build content-hash
  116  cd ..
  117  npm build content-hash
  118  npm install content-hash
  119  cd node_modules/
  120  cd content-hash/
  121  cd src
  122  ls
  123  vi index.js
  124  cd ..
  125  ls
  126  npm build
  127  npm run-script build
  128  ls
  129  cd packt
  130  ls
  131  rm -rf node_modules
  132  ls
  133  npm install
  134  npm start
  135  npm install process
  136  npm start
  137  npm install definitions
  138  npm start
  139  cd src
  140  ls
  141  vi App.js
  142  rm index.css
  143  cd ..
  144  npm start
  145  cd src
  146  ls
  147  cp index.css_backup  index.css
  148  vi index.css
  149  npm start
  150  history


12/29/2021







so far this is the winning install w/ the following webpack.config mods  - allowing for web3 and App.css files to be included: 






    1  sudo apt-get update
    2  sudo apt-get install nodejs
    3  sudo apt install npm
    4  npm install webpack@3.0.0
    5  npm install webpack-cli@3.0.8
    6  npm install ganache-cli
    7  npm install node-gyp@3.6.2
    8  npm install truffle@5.1.39
    9  npm install web3@1.0.0-beta.37
   10  npm install create-react-app
   11  curl -sL https://deb.nodesource.com/setup_14.x -o nodesource_setup.sh        <- do not run node16 or suffer module not found error!!!!!!
   12  sudo bash nodesource_setup.sh
   13  sudo apt install nodejs
   14  ubuntu@ip-172-31-16-17:~$
   15  ./node_modules/.bin/create-react-app  packt
   16  ls
   17  cd packt
   18  npm install
   19  npm start
   20  history




./node_modules/.bin/ganache-cli --port 8545  --chainId 5777  -h  ec2-54-184-221-155.us-west-2.compute.amazonaws.com



./node_modules/.bin/ganache-cli --port 8545  --chainId 5777  -h  ec2-54-184-221-155.us-west-2.compute.amazonaws.com


now, step in with web3: 


(ok, so lets warm up by dumping some basic blockchain data to the web...via web3)

web3 = new Web3( new Web3.providers.HttpProvider("http://ec2-54-184-221-155.us-west-2.compute.amazonaws.com:8545"));

> Web3 = require("web3")

> network = web3.eth.net.getNetworkType()


> network
Promise {
  'private',
  [Symbol(async_id_symbol)]: 999,
  [Symbol(trigger_async_id_symbol)]: 998,
  [Symbol(destroyed)]: { destroyed: false }
}
>

> accounts = web3.eth.getAccounts()

Promise {
  [
    '0x8E53407B2bf0f4Eb7148b14F2e35F123FC9e2529',
    '0x3A572268afBB98D12E8996c394FC2dC70b4b9a3e',
    '0x9f3C6Dd1273e39b42438670eA5C5F6038009B928',
    '0x9f39b75514672ecaBd69f9b266a3A9980CA31702',
    '0x35E6475473626A1670bc6C1190A0cA97BF6F51F1',
    '0x2C26AfD2101A6010E38930ADa5b6c98079E00E10',
    '0xd8C2C5002Ef3C865FddeAAAc453A4929b4bF69a3',
    '0x0CB12F3aAf1a805a8CaebB32988CB74A81584B4B',
    '0x15019499fBD8105E986C37b590BD7C004659bA65',
    '0x18324A14351FCdA0CC3A8adE0ac306903e07922c'
  ],
  [Symbol(async_id_symbol)]: 917,
  [Symbol(trigger_async_id_symbol)]: 5,
  [Symbol(destroyed)]: { destroyed: false }






import React, { Component } from 'react'
import Web3 from 'web3'
import logo from './logo.svg';
import './App.css';


class App extends Component {

	state = { account: '' }
	componentWillMount(){
		this.loadBlockchainData()
	}

	async loadBlockchainData(){
		const web3 = new Web3(new Web3.providers.HttpProvider("http://ec2-54-184-221-155.us-west-2.compute.amazonaws.com:8545"))
		const network = await web3.eth.net.getNetworkType()
		console.log(network)
		const accounts = await web3.eth.getAccounts()
		console.log(accounts)
		this.setState({account: accounts[0]})
	}
		

render(){
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
	<p> Your account:  { this.state.account}</p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
  );
}
}
export default App;




12/30/2021

1.) start ganache
2.) start react
3.) deploycontract via web3/ console
3.5) setup metamask
4.) test
5.) update to invoke procedures











/packt$ npm install web3
# make sure that you cd to the 'contracts' directory....

> Web3 = require("web3")
> web3 = new Web3( new Web3.providers.HttpProvider("http://ec2-54-149-209-27.us-west-2.compute.amazonaws.com:8545"));
>code = fs.readFileSync('Voting.sol').toString()
var solc = require('solc');
var CONTRACT_FILE = 'Voting.sol'
var content =fs.readFileSync(CONTRACT_FILE).toString()
var input = {
  language: 'Solidity',
  sources: {
    [CONTRACT_FILE]: {
      content: content
    }
  },
  settings: {
    outputSelection: {
      '*': {
        '*': ['*']
      }
    }
  }
}




var compiled = solc.compile(JSON.stringify(input))
var output = JSON.parse(compiled)
//  not this but this !!!!!  (below)   var abi = output.contracts[CONTRACT_FILE]['Voting'].abi
to fix i redeployed the contract from my web app (DAPP)
 abi = JSON.parse('[{"constant":true,"inputs":[{"name":"candidate","type":"bytes32"}],"name":"totalVotesFor","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"candidate","type":"bytes32"}],"name":"validCandidate","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"votesReceived","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"candidateList","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"candidate","type":"bytes32"}],"name":"voteForCandidate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"candidateNames","type":"bytes32[]"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]')






var bytecode = output.contracts[CONTRACT_FILE]['Voting'].evm.bytecode.object
var HelloWorld = new web3.eth.Contract(abi);


deployedContract = new web3.eth.Contract(abi)
listOfCandidates = ['Rama', 'Nick', 'Jose']





ubuntu@ip-172-31-22-13:~/packt/contracts$ npm install solc


deployedContract.deploy({
  data: bytecode,
  arguments: [listOfCandidates.map(name => web3.utils.asciiToHex(name))]
}).send({
  from: '0xA24B4a82d330Fdc6961d55589E500b70501dEC77',
  gas: 1500000,
  gasPrice: web3.utils.toWei('0.00003', 'ether')
}).then((newContractInstance) => {
  deployedContract.options.address = newContractInstance.options.address
  console.log(newContractInstance.options.address)
});




deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)

deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0xA24B4a82d330Fdc6961d55589E500b70501dEC77'}).then((f) => console.log(f))

deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)




./node_modules/.bin/ganache-cli --port 8545  --chainId 5777  -h  ec2-54-149-209-27.us-west-2.compute.amazonaws.com




0x6002249f26F5B0d2213F6A522e43dc6e993aC003

